predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
length(glmSubset$linear.predictors)
length(dsSubset$yir)
for(i in 2:max(dsAddictsEx$r)){
dsSubset<-dsAddictsEx[dsAddictsEx$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubset<-performance(predSubset, measure="auc")
aucListHFR90[i-1]<-as.numeric(perfSubset@y.values)
}
AucIntervalPairsHFR90<-cbind(c(1:length(aucListHFR90)),aucListHFR90)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
plot(AucIntervalPairsHFR90, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
plot(AucIntervalPairsHFR90, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"), cor=c("red"))
plot(AucIntervalPairsHFR90, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"), col=c("red"))
aucList<-length(max(ptProcessDat$r))-1
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubset<-performance(predSubset, measure="auc")
aucList[i-1]<-as.numeric(perfSubset@y.values)
}
AucIntervalPairs<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
plot(AucIntervalPairsHFR90, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"), col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
peek<-ptProcessDat[ptProcessDat$r=40,]
peek<-ptProcessDat[ptProcessDat$r==40,]
head(peek)
peek<-ptProcessDat[ptProcessDat$r==80,]
head(peek)
peek<-ptProcessDat[ptProcessDat$r==120,]
head(peek)
HFR4080120<-as.integer()
length(4080120)<-length(ptProcessDat$Subject)
length(HFR4080120)<-length(ptProcessDat$Subject)
for(i in 1:length(ptProcessDat$Subject)){
HFR4080120[i]<-ifelse(ptProcessDat[i,8]<168, 0, elseif(ptProcessDat[i,8]<358, 1, 2))
}
for(i in 1:length(ptProcessDat$Subject)){
HFR4080120[i]<-ifelse(ptProcessDat[i,8]<168, 0, ifelse(ptProcessDat[i,8]<358, 1, 2))
}
dsAddictsEx<-cbind(ptProcessDat, HFR90, HFR4080120)
AucIntervalPairsHFR4080120<-cbind(c(1:length(aucListHFR4080120)),aucListHFR4080120)
aucListHFR4080120<-length(max(dsAddictsEx$r))-1
AucIntervalPairsHFR4080120<-cbind(c(1:length(aucListHFR4080120)),aucListHFR4080120)
plot(AucIntervalPairsHFR4080120, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"), col=c("blue"))
dsAddictsEx<-cbind(ptProcessDat, HFR90, HFR4080120)
head(dsAddictsEx)
tail(dsAddictsEx)
summary(dsAddicts$HFR4080120)
Factor(dsAddicts$HFR4080120)
factor(dsAddicts$HFR4080120)
tail(dsAddictsEx$HFR4080120)
HFR4080120[16000:16100]
aucListHFR4080120
aucListHFR4080120<-length(max(dsAddictsEx$r))-1
aucListHFR4080120
perfSubset@y.values
aucListHFR4080120<-length(max(dsAddictsEx$r))-1
for(i in 2:max(dsAddictsEx$r)){
dsSubset<-dsAddictsEx[dsAddictsEx$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR4080120 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubset<-performance(predSubset, measure="auc")
aucListHFR4080120[i-1]<-as.numeric(perfSubset@y.values)
}
aucListHFR4080120
AucIntervalPairsHFR4080120<-cbind(c(1:length(aucListHFR4080120)),aucListHFR4080120)
plot(AucIntervalPairsHFR4080120, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"), col=c("blue"))
par(new=TRUE)
plot(AucIntervalPairsHFR90, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"), col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
str(performance())
?performance()
?performance()
aucList<-length(max(ptProcessDat$r))-1
accList<-length(max(ptProcessDat$r))-1
fprList<-length(max(ptProcessDat$r))-1
tprList<-length(max(ptProcessDat$r))-1
fnrList<-length(max(ptProcessDat$r))-1
tnrList<-length(max(ptProcessDat$r))-1
fprList[i-1]<-as.numeric(perfSubsetFPR@y.values)
aucList<-length(max(ptProcessDat$r))-1
accList<-length(max(ptProcessDat$r))-1
fprList<-length(max(ptProcessDat$r))-1
tprList<-length(max(ptProcessDat$r))-1
fnrList<-length(max(ptProcessDat$r))-1
tnrList<-length(max(ptProcessDat$r))-1
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, measure="acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="trp")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
fprList[i-1]<-as.numeric(perfSubsetFPR@y.values)
tprList[i-1]<-as.numeric(perfSubsetTPR@y.values)
fnrList[i-1]<-as.numeric(perfSubsetFNR@y.values)
tnrList[i-1]<-as.numeric(perfSubsetTNR@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, measure="acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="tpr")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
fprList[i-1]<-as.numeric(perfSubsetFPR@y.values)
tprList[i-1]<-as.numeric(perfSubsetTPR@y.values)
fnrList[i-1]<-as.numeric(perfSubsetFNR@y.values)
tnrList[i-1]<-as.numeric(perfSubsetTNR@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, measure="acc")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
#perfSubsetACC<-performance(predSubset, measure="acc")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
#accList[i-1]<-as.numeric(perfSubsetACC@y.values)
}
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetAUC
perfSubsetACC<-performance(predSubset, measure="acc")
perfSubsetACC
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetFPR
install.package("OptimalCutpoints.r")
install.packages("OptimalCutpoints.r")
library(OptimalCutpoints)
library(OptimalCutpoints)
library(survival)
library(ROCR)
library(foreign)
install.packages("OptimalCutpoints.r")
library(OptimalCutpoints)
getwd()
install.packages("Epi.r")
library(Epi)
install.packages("survivalROC.r")
perfSubsetACC@y.values
perfSubsetACC
?performance()
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
#perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset,"auc", "acc")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
}
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetACC<-performance(predSubset,"auc", "acc")
perfSubsetACC
perfSubsetACC<-performance(predSubset, "acc")
perfSubsetACC
max(as.numeric(perfSubsetACC@y.values))
perfSubsetACC@y.values
as.numeric(perfSubsetACC@y.values)
max(perfSubsetACC@y.values)
class(perfSubsetACC@y.values)
str(perfSubsetACC@y.values)
maximum(perfSubsetACC@y.values)
max(perfSubsetACC@y.values)
which.max(perfSubsetACC@y.values)
which.max(as.numeric(perfSubsetACC@y.values))
?which.max()
which.max(as.numeric(unlist(perfSubsetACC@y.values)))
which.max(as.numeric(unlist(perfSubsetACC@y.values)))
as.numeric(unlist(perfSubsetACC@y.values))
max(as.numeric(unlist(perfSubsetACC@y.values)))
fprList[i-1]<-max(as.numeric(unlist(perfSubsetFPR@y.values)))
max(as.numeric(unlist(perfSubsetFPR@y.values)))
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetFPR@y.values
max(as.numeric(unlist(perfSubsetACC@y.values)))
max(as.numeric(unlist(perfSubsetFPR@y.values)))
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, "acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="tpr")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-max(as.numeric(unlist(perfSubsetACC@y.values)))
fprList[i-1]<-max(as.numeric(unlist(perfSubsetFPR@y.values)))
tprList[i-1]<-as.numeric(perfSubsetTPR@y.values)
fnrList[i-1]<-as.numeric(perfSubsetFNR@y.values)
tnrList[i-1]<-as.numeric(perfSubsetTNR@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, "acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="tpr")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-max(as.numeric(unlist(perfSubsetACC@y.values)))
fprList[i-1]<-max(as.numeric(unlist(perfSubsetFPR@y.values)))
tprList[i-1]<-max(as.numeric(unlist(perfSubsetTPR@y.values)))
fnrList[i-1]<-max(as.numeric(unlist(perfSubsetFNR@y.values)))
tnrList[i-1]<-max(as.numeric(unlist(perfSubsetTNR@y.values)))
}
AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair)
AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(AucIntervalPair)
plot(AccIntervalPair)
FprIntervalPair<-cbind(c(1:length(fprList)),fprList)
plot(FprIntervalPair)
TprIntervalPair<-cbind(c(1:length(tprList)),tprList)
plot(TprIntervalPair)
TprIntervalPair<-cbind(c(1:length(tprList)),tprList)
plot(TprIntervalPair)
plot(AccIntervalPair)
plot(TprIntervalPair)
FnrIntervalPair<-cbind(c(1:length(fnrList)),fnrList)
plot(FnrIntervalPair)
plot(AccIntervalPair)
plot(FnrIntervalPair)
TnrIntervalPair<-cbind(c(1:length(tnrList)),tnrList)
plot(TnrIntervalPair)
plot(AccIntervalPair)
dsAddictsEx<-cbind(ptProcessDat, HFR90, HFR4080120)
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetHF90AUC<-performance(predSubset, measure="auc")
perfSubsetHF90ACC<-performance(predSubset, "acc")
perfSubsetHF90FPR<-performance(predSubset, measure="fpr")
perfSubsetHF90TPR<-performance(predSubset, measure="tpr")
perfSubsetHF90FNR<-performance(predSubset, measure="fnr")
perfSubsetHF90TNR<-performance(predSubset, measure="tnr")
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
HF90accList[i-1]<-max(as.numeric(unlist(perfSubsetHF90ACC@y.values)))
HF90fprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FPR@y.values)))
HF90tprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TPR@y.values)))
HF90fnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FNR@y.values)))
HF90tnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TNR@y.values)))
}
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
HFR90<-as.integer()
length(HFR90)<-length(ptProcessDat$Subject)
for(i in 1:length(ptProcessDat$Subject)){
HFR90[i]<-ifelse(ptProcessDat[i,8]<428, 0, 1)
}
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
HFR90
Clinic
dsSubset$Clinic
dsSubset<-dsAddictsEx[dsAddictsEx$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetHF90AUC<-performance(predSubset, measure="auc")
perfSubsetHF90ACC<-performance(predSubset, "acc")
perfSubsetHF90FPR<-performance(predSubset, measure="fpr")
perfSubsetHF90TPR<-performance(predSubset, measure="tpr")
perfSubsetHF90FNR<-performance(predSubset, measure="fnr")
perfSubsetHF90TNR<-performance(predSubset, measure="tnr")
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
HF90aucList<-length(max(ptProcessDat$r))-1
HF90accList<-length(max(ptProcessDat$r))-1
HF90fprList<-length(max(ptProcessDat$r))-1
HF90tprList<-length(max(ptProcessDat$r))-1
HF90fnrList<-length(max(ptProcessDat$r))-1
HF90tnrList<-length(max(ptProcessDat$r))-1
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
perfSubsetHF90TNR
for(i in 2:max(dsAddictsEx$r)){
dsSubset<-dsAddictsEx[dsAddictsEx$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetHF90AUC<-performance(predSubset, measure="auc")
perfSubsetHF90ACC<-performance(predSubset, "acc")
perfSubsetHF90FPR<-performance(predSubset, measure="fpr")
perfSubsetHF90TPR<-performance(predSubset, measure="tpr")
perfSubsetHF90FNR<-performance(predSubset, measure="fnr")
perfSubsetHF90TNR<-performance(predSubset, measure="tnr")
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
HF90accList[i-1]<-max(as.numeric(unlist(perfSubsetHF90ACC@y.values)))
HF90fprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FPR@y.values)))
HF90tprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TPR@y.values)))
HF90fnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FNR@y.values)))
HF90tnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TNR@y.values)))
}
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair)
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(AccIntervalPair)
HF90FprIntervalPair<-cbind(c(1:length(fprList)),fprList)
plot(FprIntervalPair)
HF90TprIntervalPair<-cbind(c(1:length(tprList)),tprList)
plot(TprIntervalPair)
HF90FnrIntervalPair<-cbind(c(1:length(fnrList)),fnrList)
plot(FnrIntervalPair)
HF90TnrIntervalPair<-cbind(c(1:length(tnrList)),tnrList)
plot(TnrIntervalPair)
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair)
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(HF90AccIntervalPair)
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(HF90AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(HF90AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(HF90AccIntervalPair)
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(HF90AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
library(foreign)
ds<-read.csv("gpa.csv")
SAT<-ds$SAT
GPA<-ds$GPA
setwd("~/GitHub")
ds<-read.csv("gpa.csv")
ds
dsSATGPA<-ds[,1:2]
head(dsSATGPA)
plot(GPA, SAT)
ds<-read.csv("gpa.csv")
SAT<-ds$SAT
GPA<-ds$GPA
plot(GPA, SAT)
q<-cor.test(GPA, SAT)
as.numeric(q$estimate)
GPArel<-0.9
SATrel<-0.85
source("Utilities/rDisattenuated.r")
rDisattenuated(ds$GPA, ds$SAT, GPArel, SATrel)
as.numeric(q$estimate)
GPArel*SATrel
sqrt(GPArel*SATrel)
as.numeric(q$estimate)/(sqrt(GPArel*SATrel))
rDisattenuated(ds$GPA, ds$SAT, GPArel, SATrel)
mean(ds$GPA)
sd(ds$GPA)
range(ds$GPA)
mean(ds$SAT)
sd(ds$SAT)
range(ds$SAT)
q<-cor.test(GPA, SAT)
q
r<-cor(GPA, SAT)
r
cov(GPA, SAT)
var(SAT)
cov(GPA, SAT)/var(SAT)
var(SAT)
sd(SAT)
sd(GPA)
(0.3762257)*(0.5427207/88.44936)
mean(GPA)
mean(SAT)
mean(GPA)-(as.numeric(q$estimate)*mean(SAT))
as.numeric(q$estimate)
(2.70012)-(.3762257*504.5834)
GPAhat<-glm(GPA~SAT)
GPAhat
library(foreign)
ds<-read.csv("gpa.csv")
SAT<-ds$SAT
GPA<-ds$GPA
Prevach<-ds$Prevach
dsSATGPA<-ds[,1:2]
head(dsSATGPA)
plot(GPA, SAT)
cov(GPA, SAT)/var(SAT)
var(SAT)
sd(SAT)
sd(GPA)
r<-cor(GPA, SAT)
q<-cor.test(GPA, SAT)
as.numeric(q$estimate)
GPArel<-0.9
SATrel<-0.85
source("Utilities/rDisattenuated.r")
rDisattenuated(ds$GPA, ds$SAT, GPArel, SATrel)
mean(ds$GPA)
sd(ds$GPA)
range(ds$GPA)
mean(ds$SAT)
sd(ds$SAT)
range(ds$SAT)
install.packages("psych.r")
library(psych)
install.packages(psych.r)
library(psych)
library(psych)
source(SkewnessKurtosis)
source(SkewnessKurtosis.r)
source(SkewnessKurtosis.R)
getwd()
source(./Utilities/SkewnessKurtosis.R)
source(/Utilities/SkewnessKurtosis.R)
source(Utilities/SkewnessKurtosis.R)
source(C:\Users\Psychometrics\Documents\GitHub\Utilities\SkewnessKurtosis.R)
source(.\GitHub\Utilities\SkewnessKurtosis.R)
source(C:\Users\Psychometrics\Documents\GitHub\Utilities/SkewnessKurtosis.R)
setwd("~/GitHub/Utilities")
source(SkewnessKurtosis.R)
source(SkewnessKurtosis.R)
source(SkewnessKurtosis.r)
source(SkewnessKurtosis)
source('SkewnessKurtosis.r')
myskewness.adjusted(ds$SAT)
myskewness(ds$SAT)
myskewness.adjusted(ds$GPA)
myskewness(ds$GPA)
mykurtosis(ds$GPA)
mykurtosis(ds$SAT)
setwd("~/GitHub")
dsAnderson<-read.csv("./SurvivalExercises/Andrew/dsAnderson.csv")
colnames(dsAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx")
AndersonPh<-coxph(Surv(survt, status==1)~sex+logWBC+rx, data=dsAnderson, ties="breslow")
cox.zph(AndersonPh, transform="rank")
library(survival)
library(foreign)
dsAnderson<-read.csv("./SurvivalExercises/Andrew/dsAnderson.csv")
colnames(dsAnderson)<-c("subject", "survt", "status", "sex", "logWBC", "rx")
AndersonPh<-coxph(Surv(survt, status==1)~sex+logWBC+rx, data=dsAnderson, ties="breslow")
cox.zph(AndersonPh, transform="rank")
eventTimes <- unique(dsAnderson$survt[dsAnderson$status==1])
eventTimes <- eventTimes[order(eventTimes)]
require(plyr)
createPTable <- function(d){
dNew <- d
for(i in 1:length(eventTimes)){
dNew[i,] <- d
dNew[i,"r"] <- i
dNew[i,"tr"] <- eventTimes[i]
dNew[i,"dir"] <- ifelse(i==1,min(d$survt,eventTimes[i]),min(d$survt,eventTimes[i]) - eventTimes[i-1])
dNew[i,"yir"] <- 0
if(d$survt <= eventTimes[i]) {
if(d$status %in% 1) dNew[i,"yir"] <- 1
break
}
}
return(dNew)
}
ptProcessAnderson <- ddply(.data=dsAnderson,.variables=.(subject),.fun = createPTable)
head(ptProcessAnderson)
setwd("~/GitHub/Utilities")
source('ctProcessExpansion.r')
source('ctProcessExpansion.R')
source('ctProcessExpansion.R')
source('ctProcessExpansion.R')
source('ctProcessExpansion.R')
source('ctProcessExpansion.R')
source('ctProcessExpansion.R')
dsTest<-ctProcessExpansion(dsAnderson, status, s)
dsTest<-ctProcessExpansion(dsAnderson, status, survt)
dsTest<-ctProcessExpansion(dsAnderson, subject)
source('ctProcessExpansion.R')
dsTest<-ctProcessExpansion(dsAnderson, subject, status, survt)
source('ctProcessExpansion.R')
dsTest<-ctProcessExpansion(dsAnderson, subject, status, survt)
source('ctProcessExpansion.R')
dsTest<-ctProcessExpansion(dsAnderson, subject, status, survt)
source('ctProcessExpansion.R')
dsTest<-ctProcessExpansion(dsAnderson, subject, status, survt)
